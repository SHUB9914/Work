package com.spok.util

import akka.http.scaladsl.model.ws.TextMessage
import akka.stream.scaladsl.Source

/**
 * Provides the constants being used by other services
 */
object Constant {

  val SUCCESS = "success"
  val FAILED = "failed"
  val HTTP = "http://"
  val PING = "ping"
  val DELIMITER = "/"
  val GREETER = "greeter"
  val WS = "ws://"
  val SPOKS = "spoks"
  val NOTIFICATION = "notification"
  val ADD = "add"
  val SEND = "send"
  val REGISTER = "register"
  val AUTHENTICATE = "authenticate"
  val DETAILS = "details"
  val DISABLEACCOUNT = "disableaccount"
  val MY_ACCOUNT_DISABLE = "myaccountdisable"
  val UPDATE_LEVEL = "updateLevel"
  val CODE = "code"
  val AUTH_CODE = "auth_code"
  val PROFILE = "profile"
  val UPLOAD = "upload"
  //val GROUP = "group"
  val SPOK = "spok"
  val RESPOK = "respok"
  val FOLLOW_UNFOLLOW = "followUnfollow"
  val CREATE_GROUP = "createGroup"
  val UPDATE_GROUP = "updateGroup"
  val REMOVE_GROUP = "removeGroup"
  val ADD_FOLLOWER_GROUP = "addFollower"
  val REMOVE_FOLLOWER_GROUP = "removeFollower"
  val UPDATE_USER_PROFILE = "updateUserProfile"
  val CREATE_SPOK = "create spok"
  val UNSPOK = "unspok"
  val ADD_COMMENT = "addComment"
  val REMOVE_COMMENT = "removeComment"
  val UPDATE_COMMENT = "updateComment"
  val REMOVE_NOTIFICATION = "removeNotification"
  val RECEIVE_NOTIFICATION = "receiveNotification"
  val SUBSCRIBE = "subscribe"
  val SUBSCRIBER = "subscriber_"
  val TALK_ = "talk_"
  val TALK = "talk"
  val TALKS = "talks"
  val NOTIFICATION_REDIS = "notification_"
  val STACK = "stack"
  val GROUPS = "groups"
  val ALLGROUPS = "allgroups"
  val STATS = "stats"
  val ABSTATS = "abstats"
  val REMOVE = "remove"
  val UPDATE = "update"
  val SCOPED = "scoped"
  val RESPOKERS = "respokers"
  val FULL = "full"
  val COUNTRYCODEPATTERRN = """([+])([0-9]{1,6})"""
  val PHONENUMBERPATTERN = """([0-9]{6,14})"""
  val LOCATIONEXCEPTIONSTRING =
    """ {
      "nickname":"random",
      "birthdate":"1992-10-25",
      "location":{
        "results" : [],
        "status" : "ZERO_RESULTS"
      }
      "gender":"male",
      "contacts":["+9183788298","+9198896713"]
      "phone_number":"+9195821151"
    }"""

  val ZERO = "0"
  val NINE = 9
  val NICKNAME = "nickname"
  val BIRTHDATE = "birthdate"
  val USER_BIRTHDATE = "birthDate"
  val LOCATION = "location"
  val GENDER = "gender"
  val CONTACTS = "contacts"
  val USERNUMBER = "phone_number"
  val OTPCODE = "code"
  val COUNTRYCODE = "country_code"
  val OK = "OK"
  val MALE = "male"
  val FEMALE = "female"
  val NICKNAMEREGEX = "^[a-zA-Z]+([ a-zA-Z\\.\\-'\"]+){2,30}$"
  val DATEFORMAT = "yyyy-MM-dd"
  val NA = "N/A"
  val MAX_RETRIES = 3
  val LATITUDEREGEX = "^(\\+|-)?((\\d((\\.)|\\.\\d{1,6})?)|(0*?[0-8]\\d((\\.)|\\.\\d{1,7})?)|(0*?90((\\.)|\\.0{1,6})?))$"
  val ELEVATIONREGEX = "^(\\+)?((\\d((\\.)|\\.\\d{1,6})?)|(0*?[0-8]\\d((\\.)|\\.\\d{1,6})?)|(0*?90((\\.)|\\.0{1,6})?))$"
  val LONGITUDEREGEX = "^(\\+|-)?((\\d((\\.)|\\.\\d{1,6})?)|(0*?\\d\\d((\\.)|\\.\\d{1,7})?)|(0*?1[0-7]\\d((\\.)|\\.\\d{1,6})?)|(0*?180((\\.)|\\.0{1,6})?))$"
  val URLREGEX = "^(http(?:s)?\\:\\/\\/[a-zA-Z0-9]+(?:(?:\\.|\\-)[a-zA-Z0-9]+)+(?:\\:\\d+)?(?:\\/[\\w\\-]+)*(?:\\/?|\\/\\w+\\" +
    ".[a-zA-Z]{2,4}(?:\\?[\\w]+\\=[\\w\\-]+)?)?(?:\\&[\\w]+\\=[\\w\\-]+)*)$"
  val PICTURE = "picture"
  val COVER = "cover"
  val ANIMATED_GIF = "animatedgif"
  val VIDEO = "video"
  val SOUND = "sound"
  val URL = "url"
  val RAW_TEXT = "rawtext"
  val TEXT = "text"
  val HTML_TEXT = "htmltext"
  val POLL = "poll"
  val ANSWER_POLL = "answerPoll"
  val ANSWERS_POLL = "answersPoll"
  val RIDDLE = "riddle"
  val INVALID_JSON = "Invalid JSON"
  val FOLLOWER = "follower"
  val MY = "my"
  val FOLLOWERS = "followers"
  val FOLLOWINGS = "followings"
  val SETTINGS = "settings"
  val PHONE = "phone"
  val FOLLOWING_ID = "followingId"
  val SEARCH = "search"
  val AUTONICK = "autonick"
  val AUTOHASH = "autohash"
  val POPULAR = "popular"
  val LAST = "last"
  val FRIENDS = "friends"
  val TRENDY = "trendy"
  val ACTUAL_QUESTIONS = "actualQuestions"
  val PENDING_QUESTIONS = "pendingQuestions"
  val NB_FINISHED = "nbFinished"
  val NB_ANSWERED = "nbAnswered"
  val SEARCHMSG = "searchmsg"
  val SEARCHTALKER = "searchtalker"
  val SEARCHTALKS = "searchtalks"
  val GEOTEXT = "geoText"
  val LEVEL = "level"
  val IS_SUSPENDED = "isSuspended"
  val SPOKER_ID = "spokerId"
  val DISABLED = "disabled"
  val ADMIN = "admin"
  val SUPERADMIN = "superadmin"
  val LOCATIONRESULT = "locationResult"

  /**
   * Error Messages
   */
  val INVALID_PHONE_NUMBER = "Invalid phone number."
  val ALREADY_USED_NUMBER = "Phone number already used."
  val USER_NOT_REGISTERD = "User not regitered."
  val GENERIC_ERROR_MESSAGE = "Unable registering phone (generic error)."
  val GENERIC_ERROR_MESSAGE_AUTHENTICATE = "Unable authenticate phone (generic error)."
  val GENERIC_ERROR_SPOK_VIEWING = "Unable viewing results of poll "
  val INVALID_OTP = "Invalid confirmation code."
  val WRONG_OTP = "Wrong confirmation code (unrelated to this phone)."
  val MAX_RETRIES_MESSAGE = "OTP expired, Retries exceeded max allowed tries"
  val OTP_EXPIRED = "OTP expired"
  val GENERIC_OTP_ERROR_MESSAGE = "Unable validating phone (generic error)."
  val VERIFY_NUMBER = "Please go to step1 and verify you number"
  val STACK_ERROR = "Unable loading spok's stack (generic error)"
  val MY_SPOKS_ERROR = "Unable loading my spoks list (generic error)."
  val JSONERROR = TextMessage(INVALID_JSON)
  val RESPOK_FAILURE = TextMessage(Source.single("Respok failed"))
  val ADD_COMMENT_FAILURE = TextMessage(Source.single("Add comment failed"))
  val UNSPOK_FAILURE = TextMessage("Unable un-spoking spok")
  val INVALID_MEDIA_FILE = "Media file (video, sound, picture or animated gif) is missing for creating the spok"
  val INVALID_LATITUDE = "Invalid Latitude"
  val INVALID_LONGITUDE = "Invalid longitude"
  val INVALID_ELEVATION = "Invalid elevation"
  val INVALID_GEOCORDINATES = TextMessage("Invalid geocoordinates (generic error).")
  val INVALID_VISIBILITY = "Invalid Visibility"
  val INVALID_NICKNAME = "Invalid nickname"
  val INVALID_BIRTHDATE = "Invalid date"
  val INVALID_GENDER = "Invalid gender"
  val VALID_USER_PROFILE = TextMessage("Valid user profile")
  val INVALID_CONTENT = "Invalid Content Type"
  val INVALID_URL_CONTENT = "Invalid URL's content type"
  val INVALID_URL = "Invalid URL"
  val INVALID_POLL = "Poll can't be empty."
  val INVALID_RIDDLE = "Riddle can't be empty."
  val INVALID_TEXT = "Text can't be empty."
  val INVALID_QUESTION = "Invalid spok's questions"
  val INVALID_ANSWER = "Invalid spok's answers"
  val TEXT_LONG_ERROR = "Text is too long"
  val TEXT_SHORT_ERROR = "Text is too short"
  val GROUP_REMOVAL_ERROR = "Unable to remove group "
  val INVALID_PICTURE_DIMENSION = "Invalid picture dimensions."
  val INVALID_PICTURE_SIZE = "Invalid picture size."
  val INVALID_File_SIZE = "Invalid file size."
  val INVALID_PICTURE_FORMAT = "Invalid picture format."
  val INVALID_BASE64_ENCODED_FILE = "Invalid base64 encoded file"
  val JWT_SECRET_KEY = "47542229-1b94-4864-94d0-c63758401a04"
  val JWT_TOKEN_TYPE = "JWT"
  val ROLE = "role"
  val PHONE_NUMBER = "phone_number"
  val USER_ROLE = "user"
  val ADMIN_ROLE = "admin"
  val VALID_SPOK = "Valid Spok"
  val VALID_COMMENT = "Valid Comment"
  val RESPOK_SUCCESS = TextMessage(Source.single("Respok done"))
  val UNABLE_CREATING_SPOK_GENERIC_ERROR = "Unable creating spok (generic error)"
  val UNABLE_COMMENTING_SPOK = "Unable commenting spok (generic error)"
  val UNABLE_REMOVING_COMMENT = "Unable removing comment (generic error)"
  val USER_FOLLOWED = "User Followed"
  val USER_FOLLOWED_FREIND = "User Followed and are now Friend"
  val USER_UNFOLLOWED = "User Unfollowed"
  val FRIEND = "Friend"
  val NOT_FRIEND = "NotFriend"
  val GROUP_CREATION_ERROR = "Unable to create group (generic error)"
  val GROUP_CREATION_SPOK = "Unable to create spok (generic error)"
  val FOLLOW_UNFOLLOW_ERROR = "Unable to Follow/Unfollow user (Generic Error)"
  val FOLLOW_ID_ERROR = "Following id is not found"
  val TITLE = "title"
  val ADD_FOLLOWERS_IN_GROUP_ERROR = "Unable adding follower(s)/contact(s) to group"
  val NOT_FOLLOW_ITSELF = "User cannot follow himself/herself"
  val USER_AND_CONTACTS_ALREDY_IN_GROUP = "Users and contacts are already added in group"
  val REMOVE_FOLLOWERS_IN_GROUP_ERROR = "Unable removing follower(s) or contact(s) from group"
  val FOLLOWERS_ADDED_IN_GROUP = "Follower(s)/contact(s) are added in group"
  val FOLLOWERS_REMOVED_IN_GROUP = "Follower(s)/contact(s) are removed from group"
  val CHANGE_GROUP_NAME = "Please change the group title"
  val GROUP_TITLE_SHORT = "Title is too short"
  val GROUP_TITLE_LONG = "Title is too long"
  val VALID_GROUP = "valid group"
  val DEFAULT = "default"
  val REMOVE_PROTOCOL = "remove_"
  val UPDATE_PROTOCOL = "update_"
  val NAME = "name"
  val ID = "id"
  val GROUP_CANNOT_BE_DELETED = "This group cannot be deleted"
  val GROUP_UPDATE_ERROR = "Unable updating group "
  val REGISTERED = "registered"
  val MENTION = "mention"
  val SPOK_NOT_FOUND = "Spok not found"

  val SPOKER_SUSPENDED = "Spoker Suspended"
  val SPOKER_NOT_SUSPENDED = "Spoker Not Suspended"
  val GROUP_NOT_FOUND = "Group not found"
  val UNABLE_LOADING_SPOK = "Unable loading spok (generic error)"
  val COMMENT = "comment"
  val COMMENTS = "comments"
  val GEO = "geo"
  val WALL = "wall"
  val QUESTION = "question"
  val ANSWER = "answer"
  val POLL_LABEL = "poll"
  val RANK = "rank"
  val DESC = "desc"

  val DSE_SPOK = "spok"
  val DSE_COMMENT = "comment"
  val SPOK_INSTANCE = "SpokInstance"
  val ABSOLUTE_SPOK_ID = "absoluteSpokId"
  val DSE_URL = "url"
  val DSE_GEO = "geo"
  val STATISTICS = "statistics"
  val HAS_STATISTICS = "hasStatistics"
  val IS_PRESENT_AT = "isPresentAt"
  val BELONGS_TO = "belongsTo"
  val HAS_A = "hasA"
  val SPOK_ID = "spokId"
  val LATITUDE = "latitude"
  val LONGITUDE = "longitude"
  val ELEVATION = "elevation"
  val INSTANCE_ID = "instanceId"
  val QUESTION_ID = "questionId"
  val HAS_A_CHILD_INSTANCE = "hasAChildInstance"
  val HAS_PARENT = "hasParent"
  val HAS_A_COMMENT = "hasAComment"
  val UNSPOKED = "unspoked"
  val RESPOKED = "respoked"
  val PENDING = "pending"
  val HAS_A_SPOK_INSTANCE = "hasASpokInstance"
  val PUBLIC = "public"
  val PRIVATE = "private"
  val USER_ID = "userId"
  val USER = "users"
  val CREATES_A = "createsA"
  val CREATES_A_GROUP = "createsAGroup"
  val DSE_GROUP = "group"
  val GROUP_ID = "groupId"
  val TRUE = "true"
  val FALSE = "false"
  val PHONE_NO = "phoneNo"
  val MOBILE_NO = "mobileNo"
  val HAS_A_CONTACT = "hasAContact"
  val ACTIVITY_GEO = "activityGeo"
  val DSE_NOTIFICATION = "notification"
  val NOTIFICATION_ID = "notificationId"
  val RECEIVE_A = "receiveA"
  val EMITTER_BY = "emittedBy"
  val DATETIME = "datetime"
  val QUOTES = """""""
  val QUOTES_WITH_ESCAPE = """\""""
  val NO_SPACE = ""
  val FOLLOWS = "follows"
  val UNFOLLOWS = "unfollows"
  val STATUS = "status"
  val SPOK_VALID = "spok is valid"
  val DISABLED_SPOK = "spok is already disabled"
  val DISABLED_SPOK_ERROR_MESSAGE = Map("error" -> DISABLED_SPOK)
  val REMOVED = "removed"
  val VISIBILITY = "visibility"
  val CONTENT_TYPE = "contentType"
  val ORIGINAL_VISIBILITY = "original_visibility"
  val COMMENT_ID = "commentId"
  val ERROR = "error"
  val LAUNCHED = "launched"
  val TIMESTAMP = "timestamp"
  val RAWTEXT = "rawtext"
  val URLTYPE = "url"
  val NOTIFICATION_REMOVED = "Notification Removed Successfully"
  val GROUP_AND_VISIBILITY_ERROR = TextMessage("Please correct group id and visibility")
  val COMMENT_ADDED = "Comment Added"
  val COMMENT_UPDATED = "Comment Updated"
  val UNSUBSCRIBE_SPOK_FEED = "unsubscribe spok's feed"
  val SUBSCRIBE_SPOK_FEED = "subscribe spok's feed"
  val ACCOUNT_NOT_FOUND = "Account not found"
  val UNABLE_AUTHENTICATING_PHONE_GENERIC_ERROR = "Unable authenticating phone (generic error)"
  val UNABLE_AUTHENTICATING_USER = "Unable authenticating user (generic error)"
  val INVALID_USER = "Invalid User"
  val UNABLE_DISABLING_SPOK = "Unable disabling spok (generic error)"
  val UNABLE_REMOVING_SPOK = "Unable removing spok (generic error)"
  val SPOK_STATUS_NOT_RESPOKED = "Spok status is not Respoked"
  val REMOVED_SPOK_FROM_WALL = "Spok has been removed from wall"
  val SPOK_REMOVE_SUCCESS = "Spok removed successfully"
  val SPOKINSTANCE_ID = "spokInstanceId "
  val SPOK_DISABLED = "Spok has been disabled"
  val HAS_A_POLL = "hasAPoll"
  val HAS_A_RIDDLE = "hasARiddle"
  val HAS_A_QUESTION = "hasAQuestion"
  val HAS_AN_ANSWER = "hasAnAnswer"
  val HAS_SETTINGS = "hasSettings"
  val SETTINGS_LABEL = "settings"
  val FOLLOW_SETTINGS = "followSettings"
  val HELP_SETTINGS = "helpSettings"
  val UPDATE_PHONE_STEP_ONE = "updatePhoneStepOne"
  val UPDATE_PHONE_STEP_TWO = "updatePhoneStepTwo"
  val VIEW_MY_DETAILS = "viewMyDetails"
  val GET_GROUPS = "getGroups"
  val GET_NOTIFICATIONS = "getNotifications"
  val GET_FOLLOWINGS = "getFollowings"
  val GET_FOLLOWERS = "getFollowers"
  val DISABLE_USER = "disableUser"
  val VIEW_FULL_DETAILS = "viewFullDetails"
  val VIEW_MINIMAL_DETAILS = "viewMinimalDetails"
  val HELP = "help"
  val RESPONSE_SAVED = "Your response for the question was saved"
  val GIVES_AN_ANSWER = "givesAnAnswer"
  val ANSWER_ROUTE = "answer"
  val DISABLE = "disable"
  val REMOVE_SPOK = "removeSpok"
  val LOAD_STACK = "loadStack"
  val MY_SPOKS = "myspoks"
  val VIEW_POLL_QUESTION = "viewPollQuestion"
  val VIEW_SPOKERS_WALL = "viewSpokersWall"
  val GET_COMMENTS = "getComments"
  val VIEW_FULL_SPOK = "viewFullSpok"
  val VIEW_SHORT_SPOK = "viewShortSpok"
  val LOAD_SPOKERS = "loadRespokers"
  val LOAD_SCOPED_USERS = "loadScopedUsers"
  val SPOK_STATS = "spokStatistics"
  val PENDING_USERS_COUNT = "pendingUsersCount"
  val UNSPOKED_USERS_COUNT = "unspokedUsersCount"
  val RESPOKED_USERS_COUNT = "respokedUsersCount"
  val HASHTAG = "hashtag"
  val TOTALUSERSCOUNT = "totalUsers"
  val TOTALCONTACTSCOUNT = "totalContacts"
  val SPECIFIC_GROUP = "specificGroup"
  val DATA = "data"
  val GET_MY_PROFILE = "getMyProfile"
  val GET_USER_DETAILS_BY_ADMIN = "getUserDetailsByAdmin"

  val SUSPEND_SPOKER = "suspendSpoker"
  val REACTIVATE_SPOKER = "reactivateSpoker"

  val LAUNCHEDTIME = "launchedtime"
  val GEO_LATITUDE = "geo_lat"
  val GEO_LONGITUDE = "geo_long"
  val SPOK_DETAILS = "spokdetails"
  val SOLR_USERID = "userid"
  val SOLR_CONTENT_TYPE = "contenttype"
  //Search route recources
  val SEARCH_NICKNAME = "searchNickname"
  val SEARCH_HASHTAG = "searchHashtag"
  val SEARCH_POPULAR_SPOKER = "searchPopularSpoker"
  val LOAD_LAST_SPOKS = "loadLastSpoks"
  val LOAD_FRIEND_SPOKS = "loadFriendSpoks"
  val LOAD_TRENDY_SPOKS = "loadTrendySpoks"
  val LAUNCH_SEARCH = "launchSearch"

  /*
  Spok Egde Properties
   */
  val FROM = "from"
  val AUTHOR = "author"
  val HEADER_TEXT = "headerText"
  val ISASSOCIATEDWITH = "isAssociatedWith"
  val HAS_STATS = "hasStats"
  val IS_POSTED_ON = "isPostedOn"
  val ENABLED = "enabled"

  /*
  Spok content type
   */
  val FILE_TYPE = "media"
  val URL_TYPE = "url"
  val RIDDLE_TYPE = "riddle"
  val POLL_TYPE = "poll"
  val TEXT_TYPE = "rawtext"
  val CONATINS_A = "containsA"
  val PICTURE_TYPE = "picture"
  val ANIMATED_GIF_TYPE = "animatedgif"
  val VIDEO_TYPE = "video"
  val SOUND_TYPE = "sound"
  val FILE = "file"

  /*
  Spok Stats Properties
   */
  val TRAVELLED = "travelled"
  val NB_USERS = "nb_users"
  val NB_RESPOKED = "nb_respoked"
  val NB_UNSPOKED = "nb_unspoked"
  val NB_PENDING = "nb_pending"
  val NB_COMMENTS = "nb_comments"

  /*
  Error messages for user update profile.
   */
  val USER_PROFILE_UPDATE_SUCCESS = "User profile updated successfully"
  val USER_PROFILE_UPDATE_GENERIC_ERROR = "Unable updating profile (generic error)"
  val USER_NOT_FOUND = "User not found"
  val PROPERTY_NOT_FOUND = "Property not found"
  val NOT_ALLOWED_LOADING_FOLLOWINGS = "Not allowed to load user followings."
  val USER_PROFILE_LOADING_GENERIC_ERROR = "Unable loading user (generic error)"
  val LOADING_NOTIFICATION_GENERIC_ERROR = "Unable loading notifications (generic error)"
  val LOAD_USER_FOLLOWING_GENERIC_ERROR = "Unable loading user followings (generic error)"
  val LOAD_GROUP_DETAILS_GENERIC_ERROR = "Unable listing groups (generic error)"
  val FOLLOWS_SETTING_UPDATE_GENERIC_ERROR = "Unable updating follows setting (generic error)"
  val HELP_SETTING_UPDATE_GENERIC_ERROR = "Unable updating help setting (generic error)"
  val ACTION = "action"

  /*
  Error messages for updating phone number
   */
  val WRONG_PHONE_NUMBER = "Either old number doesn't exists or new number already exists"
  val UNABLE_SENDING_OTP_GENERIC_ERROR = "Unable sending changing phone number confirmation code (generic error)"
  val INVALID_PHONE_NUMBERS = "Invalid phone number"
  val PHONE_NUMBER_UPDATED = "User phone number updated successfully"
  val UNABLE_CHANGING_PHONE_NUMBER = "Unable changing phone number (generic error)"

  val USER_SETTINGS_UPDATE_SUCCESS = "User Settings updated successfully"
  val HELP_SETTING_UPDATE_SUCCESS = "User help setting updated successfully"

  val INVALID_ACTION = "Huhh!!! I didn't get your request."
  val MISSING_ACTION = "Action is missing."

  /*
  Error messages for respoking a spok
   */
  val NOT_ALTER_VISIBILITY = "You can not alter the visibility of this spok."
  val RESPOK_IN_OTHER_GROUP_ERROR = "Cannot respok in any other private group"
  val RESPOK_IN_DEFAULT_GROUP_ERROR = "Cannot respok in default group"
  val ACTION_IMPOSSIBLE = "Action impossible for a suspended account"

  val INVALID_SUPPORT_MESSAGE = "Invalid support message."
  val NICKNAME_ALREADY_IN_USE = "Nickname is already in use."
  val NOT_VALID_LEVEL = "Not valid level in use"

  /*
  Error messages for searching api.
   */
  val UNABLE_SEARCHING_NICKNAME = "Unable searching nicknames (generic error)."
  val UNABLE_SEARCHING_HASHTAG = "Unable searching hashtags (generic error)."
  val UNABLE_LOADING_SPOKER = "Unable loading popular spokers list (generic error)."
  val UNABLE_LOADING_LAST_SPOKS = "Unable loading the last spoks list (generic error)."
  val UNABLE_LOADING_FRIEND_SPOKS = "Unable loading the last spoks of my friends (generic error)."
  val UNABLE_LOADING_TRENDY_SPOKS = "Unable loading trendy spoks list (generic error)."
  val UNABLE_SEARCHING_SPOKS = "Unable searching spokes (generic error)."

  /*
  Error message for messaging api.
   */
  val NOT_A_FRIEND = "Messages can only be sent to a friend"
  val MESSAGE_CANNOT_EMPTY = "Message cannot be empty."
  val TALK_IS_ALREADY_EXIST = "Talk is already exist."
  val UNABLE_SEND_MESSAGE = "Unable sending message (generic error)."
  val UNABLE_LOAD_TALK = "Unable loading talk's messages (generic error)."
  val UNABLE_LOAD_TALK_LIST = "Unable loading talks list (generic error)."
  val UNABLE_DELETE_TALK = "Unable removing talk (generic error)."
  val UNABLE_DELETE_MESSAGE = "Unable removing message (generic error)."
  val UNABLE_SEARCHING_MESSAGES = "Unable searching message (generic error)."
  val UNABLE_SEARCHING_TALKERS = "Unable searching talkers (generic error)."
  val RETRY_AFTER_SOMETIME = "Unable getting details ,retry again."

  /*
  Error Codes
   */

  val RGX_001 = "RGX-001"
  val RGX_002 = "RGX-002"
  val RGX_006 = "RGX-006"
  val RGX_008 = "RGX-008"
  val RGX_012 = "RGX-012"
  val RGX_009 = "RGX-009"
  val RGX_010 = "RGX-010"
  val RGX_016 = "RGX-016"
  val RGX_017 = "RGX-017"
  val RGX_018 = "RGX-018"
  val RGX_019 = "RGX-019"
  val RGX_020 = "RGX-020"
  val RGX_021 = "RGX-021"

  val PRS_001 = "PRS-001"

  val IDT_001 = "IDT-001"
  val IDT_004 = "IDT-004"
  val IDT_005 = "IDT-005"
  val IDT_007 = "IDT-007"
  val IDT_008 = "IDT-008"
  val IDT_101 = "IDT-101"
  val IDT_102 = "IDT-102"
  val IDT_104 = "IDT-104"
  val IDT_106 = "IDT-106"
  val IDT_107 = "IDT-107"
  val IDT_108 = "IDT-108"
  val IDT_109 = "IDT-109"
  val IDT_110 = "IDT-110"
  val IDT_111 = "IDT-111"
  val IDT_121 = "IDT-121"
  val IDT_122 = "IDT-122"
  val IDT_123 = "IDT-122"

  val FLW_001 = "FLW-001"
  val FLW_002 = "FLW-002"
  val FLW_101 = "FLW-101"
  val FLW_102 = "FLW-102"
  val FLW_103 = "FLW-103"
  val FLW_104 = "FLW-104"
  val FLW_105 = "FLW-105"

  val GRP_001 = "GRP-001"
  val GRP_002 = "GRP-002"
  val GRP_101 = "GRP-101"
  val GRP_102 = "GRP-102"
  val GRP_103 = "GRP-103"
  val GRP_104 = "GRP-104"
  val GRP_105 = "GRP-105"
  val GRP_106 = "GRP-106"
  val GRP_107 = "GRP-107"
  val GRP_108 = "GRP-108"

  val MYA_001 = "MYA-001"
  val MYA_101 = "MYA-101"
  val MYA_102 = "MYA-102"
  val MYA_103 = "MYA-103"
  val MYA_104 = "MYA-104"
  val MYA_105 = "MYA-105"
  val MYA_106 = "MYA-106"
  val MYA_107 = "MYA-107"

  val USR_001 = "USR-001"
  val USR_101 = "USR-101"
  val USR_102 = "USR-102"
  val USR_103 = "USR-103"
  val USR_104 = "USR-104"
  val USR_105 = "USR-105"
  val USR_106 = "USR-106"
  val USR_107 = "USR-107"

  val SPK_003 = "SPK-003"
  val SPK_012 = "SPK-012"
  val SPK_013 = "SPK-013"
  val SPK_105 = "SPK-105"
  val SPK_109 = "SPK-109"
  val SPK_106 = "SPK-106"
  val SPK_001 = "SPK-001"
  val SPK_002 = "SPK-002"
  val SPK_006 = "SPK-006"
  val SPK_008 = "SPK-008"
  val SPK_009 = "SPK-009"
  val SPK_010 = "SPK-010"
  val SPK_101 = "SPK-101"
  val SPK_102 = "SPK-102"
  val SPK_103 = "SPK-103"
  val SPK_110 = "SPK-110"
  val SPK_112 = "SPK-112"
  val SPK_014 = "SPK-014"
  val SPK_123 = "SPK-123"
  val SPK_115 = "SPK-115"
  val SPK_116 = "SPK-116"
  val SPK_117 = "SPK-117"
  val SPK_118 = "SPK-118"
  val SPK_119 = "SPK-119"
  val SPK_120 = "SPK-120"
  val SPK_121 = "SPK-121"
  val SPK_122 = "SPK-122"
  val SPK_124 = "SPK-124"
  val SPK_125 = "SPK-125"
  val SPK_126 = "SPK-126"
  val SPK_127 = "SPK-127"
  val SPK_128 = "SPK-128"
  val SPK_129 = "SPK-129"
  val SPK_130 = "SPK-130"
  val SPK_131 = "SPK-131"
  val SPK_132 = "SPK-132"
  val SPK_133 = "SPK-133"
  val SPK_134 = "SPK-134"
  val SPK_135 = "SPK-135"
  val SPK_136 = "SPK-136"
  val SPK_137 = "SPK-137"
  val SPK_201 = "SPK-201"
  val SPK_202 = "SPK-202"
  val SPK_016 = "SPK-016"
  val SPK_107 = "SPK-107"

  val ACT_101 = "ACT-101"
  val ACT_102 = "ACT-102"
  val ACT_103 = "ACT-103"

  val PIC_001 = "PIC-001"
  val PIC_002 = "PIC-002"
  val PIC_003 = "PIC-003"

  val SRH_106 = "SRH-106"
  val SRH_003 = "SRH-003"
  val SRH_001 = "SRH-001"

  val SRH_107 = "SRH-107"
  val SRH_108 = "SRH_108"
  val SRH_104 = "SRH-104"
  val SRH_103 = "SRH-103"
  val SRH_109 = "SRH-109"
  val SRH_105 = "SRH-105"
  val SYST_400 = "SYST-400"
  val SYST_401 = "SYST-401"
  val SYST_404 = "SYST-404"
  val SYST_411 = "SYST-411"
  val SYST_503 = "SYST-503"

  val MSG_001 = "MSG-001"
  val MSG_002 = "MSG-002"
  val MSG_003 = "MSG-003"
  val MSG_004 = "MSG-004"
  val MSG_101 = "MSG-101"
  val MSG_102 = "MSG-102"
  val MSG_103 = "MSG-103"
  val MSG_104 = "MSG-104"
  val MSG_105 = "MSG-105"
  val MSG_106 = "MSG-106"
  val MSG_107 = "MSG-107"
  val MSG_108 = "MSG-108"
  val MSG_109 = "MSG-109"

  val ADM_001 = "ADM-001"
  val ADM_003 = "ADM-003"
  val ADM_004 = "ADM-004"
  val ADM_101 = "ADM-101"
  val ADM_104 = "ADM-104"
  val ADM_105 = "ADM-105"
  val ADM_007 = "ADM-007"
  val ADM_008 = "ADM-008"

  //Event Names

  val PROFILE_UPDATED = "profile_updated"

  val RESPOKED_EVENT = "respoked"
  val UNSPOKED_EVENT = "unspoked"
  val COMMENT_ADDED_EVENT = "commentAdded"
  val COMMENT_UPDATED_EVENT = "commentUpdated"
  val COMMENT_REMOVED_EVENT = "commentRemoved"
  val DISABLED_EVENT = "disabled"
  val REMOVED_EVENT = "removed"
  val SUBSCRIBED_EVENT = "subscribed"
  val UNSUBSCRIBED_EVENT = "unsubscribed"

  val SUPPORT = "support"
  val MESSAGE = "message"

  val COMMENT_TEXT = "commentText"
  val COMMENTER_ID = "commenterUserId"
  val AUTHENTICATION_REQUIRED = "Authentication required"
  val AUTHENTICATION = "Authentication"
  val INVALID_JWT_TOKEN = "Invalid JWT Token"
  val UNAVAILABLE = "unavailable"
  val SERVICE_UNAVAILABLE = "Service unavailable."
  val NOT_FOUND = "Service does not exist."
  val INVALID = "invalid"

  val POLL_RESULTS = "pollResults"
  val CANNOT_VIEW_SPOK_STATS = "Not allowed to view poll's result."

  val REMOVE_TALK = "removeTalk"
  val TALK_ID = "talkId"
  val TARGETUSERID = "targetUserId"
  val MESSAGE_ID = "messageId"
  val REMOVE_MESSAGE = "removeMessage"
  val READ_MESSAGE = "readmsg"
  val TYPING = "typing"

  val CREATOR = "creator"
  val RESPOKER = "respoker"
}
