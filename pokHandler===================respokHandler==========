[1mdiff --git a/common/src/main/scala/com/spok/util/Constant.scala b/common/src/main/scala/com/spok/util/Constant.scala[m
[1mindex 960abd9..47588b7 100644[m
[1m--- a/common/src/main/scala/com/spok/util/Constant.scala[m
[1m+++ b/common/src/main/scala/com/spok/util/Constant.scala[m
[36m@@ -202,12 +202,14 @@[m [mobject Constant {[m
   val RESPOK_SUCCESS = TextMessage(Source.single("Respok done"))[m
   val UNABLE_CREATING_SPOK_GENERIC_ERROR = "Unable creating spok (generic error)"[m
   val UNABLE_COMMENTING_SPOK = "Unable commenting spok (generic error)"[m
[32m+[m[32m  val UNABLE_REMOVING_COMMENT = "Unable removing comment (generic error)"[m
   val USER_FOLLOWED = "User Followed"[m
   val USER_FOLLOWED_FREIND = "User Followed and are now Friend"[m
   val USER_UNFOLLOWED = "User Unfollowed"[m
   val FRIEND = "Friend"[m
   val NOT_FRIEND = "NotFriend"[m
   val GROUP_CREATION_ERROR = "Unable to create group (generic error)"[m
[32m+[m[32m  val GROUP_CREATION_SPOK = "Unable to create spok (generic error)"[m
   val FOLLOW_UNFOLLOW_ERROR = "Unable to Follow/Unfollow user (Generic Error)"[m
   val FOLLOW_ID_ERROR = "Following id is not found"[m
   val TITLE = "title"[m
[36m@@ -231,6 +233,9 @@[m [mobject Constant {[m
   val REGISTERED = "registered"[m
   val MENTION = "mention"[m
   val SPOK_NOT_FOUND = "Spok not found"[m
[32m+[m
[32m+[m[32m  val SPOKER_SUSPENDED = "Spoker Suspended"[m
[32m+[m[32m  val SPOKER_NOT_SUSPENDED = "Spoker Not Suspended"[m
   val GROUP_NOT_FOUND = "Group not found"[m
   val UNABLE_LOADING_SPOK = "Unable loading spok (generic error)"[m
   val COMMENT = "comment"[m
[36m@@ -426,6 +431,7 @@[m [mobject Constant {[m
   val USER_PROFILE_UPDATE_SUCCESS = "User profile updated successfully"[m
   val USER_PROFILE_UPDATE_GENERIC_ERROR = "Unable updating profile (generic error)"[m
   val USER_NOT_FOUND = "User not found"[m
[32m+[m[32m  val PROPERTY_NOT_FOUND = "Property not found"[m
   val NOT_ALLOWED_LOADING_FOLLOWINGS = "Not allowed to load user followings."[m
   val USER_PROFILE_LOADING_GENERIC_ERROR = "Unable loading user (generic error)"[m
   val LOADING_NOTIFICATION_GENERIC_ERROR = "Unable loading notifications (generic error)"[m
[36m@@ -456,6 +462,7 @@[m [mobject Constant {[m
   val NOT_ALTER_VISIBILITY = "You can not alter the visibility of this spok."[m
   val RESPOK_IN_OTHER_GROUP_ERROR = "Cannot respok in any other private group"[m
   val RESPOK_IN_DEFAULT_GROUP_ERROR = "Cannot respok in default group"[m
[32m+[m[32m  val ACTION_IMPOSSIBLE = "Action impossible for a suspended account"[m
 [m
   val INVALID_SUPPORT_MESSAGE = "Invalid support message."[m
   val NICKNAME_ALREADY_IN_USE = "Nickname is already in use."[m
[36m@@ -566,6 +573,7 @@[m [mobject Constant {[m
   val SPK_012 = "SPK-012"[m
   val SPK_013 = "SPK-013"[m
   val SPK_105 = "SPK-105"[m
[32m+[m[32m  val SPK_109 = "SPK-109"[m
   val SPK_106 = "SPK-106"[m
   val SPK_001 = "SPK-001"[m
   val SPK_002 = "SPK-002"[m
[36m@@ -579,6 +587,7 @@[m [mobject Constant {[m
   val SPK_110 = "SPK-110"[m
   val SPK_112 = "SPK-112"[m
   val SPK_014 = "SPK-014"[m
[32m+[m[32m  val SPK_123 = "SPK-123"[m
   val SPK_115 = "SPK-115"[m
   val SPK_116 = "SPK-116"[m
   val SPK_117 = "SPK-117"[m
[1mdiff --git a/persistence/src/main/scala/com/spok/persistence/factory/DSEUserSpokFactoryApi.scala b/persistence/src/main/scala/com/spok/persistence/factory/DSEUserSpokFactoryApi.scala[m
[1mindex a0f8e6f..b19174d 100644[m
[1m--- a/persistence/src/main/scala/com/spok/persistence/factory/DSEUserSpokFactoryApi.scala[m
[1m+++ b/persistence/src/main/scala/com/spok/persistence/factory/DSEUserSpokFactoryApi.scala[m
[36m@@ -149,6 +149,17 @@[m [mtrait DSEUserSpokFactoryApi extends DSEUserQuery with RandomUtil with JsonHelper[m
     }[m
   }[m
 [m
[32m+[m[32m  def spokerSuspendedOrNot(spokerId: String): String = {[m
[32m+[m
[32m+[m[32m    val isSpokerDisable = DSEPersistenceObj.isUserSuspendAlready(spokerId)[m
[32m+[m[32m    isSpokerDisable match {[m
[32m+[m[32m      case Some(true) => SPOKER_SUSPENDED[m
[32m+[m[32m      case Some(false) => SPOKER_NOT_SUSPENDED[m
[32m+[m[32m      case _ => PROPERTY_NOT_FOUND[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m  }[m
[32m+[m
 }[m
 [m
 object DSEUserSpokFactoryApi extends DSEUserSpokFactoryApi[m
[1mdiff --git a/spok/src/main/scala/com/spok/services/handler/SpokRestServiceHandler.scala b/spok/src/main/scala/com/spok/services/handler/SpokRestServiceHandler.scala[m
[1mindex ea237ce..4003bb9 100644[m
[1m--- a/spok/src/main/scala/com/spok/services/handler/SpokRestServiceHandler.scala[m
[1m+++ b/spok/src/main/scala/com/spok/services/handler/SpokRestServiceHandler.scala[m
[36m@@ -8,13 +8,14 @@[m [mimport akka.stream.scaladsl.{ Flow, Source }[m
 import akka.util.Timeout[m
 import com.datastax.driver.dse.graph.Edge[m
 import com.spok.model.SpokModel._[m
[31m-import com.spok.persistence.factory.DSEUserSpokFactoryApi[m
[32m+[m[32mimport com.spok.persistence.factory.{ DSEGraphPersistenceFactoryApi, DSEUserSpokFactoryApi }[m
 import com.spok.persistence.redis.RedisFactory[m
 import com.spok.services.service.{ SpokLogger, _ }[m
 import com.spok.services.util.SpokValidationUtil[m
 import com.spok.util.Constant._[m
 import com.spok.util._[m
 import java.io.File[m
[32m+[m
 import scala.concurrent.Future[m
 import scala.concurrent.duration.DurationInt[m
 import com.spok.services.service.SpokViewValidationCommands._[m
[36m@@ -89,10 +90,10 @@[m [mtrait SpokRestServiceHandler extends JsonHelper with HttpUtil with SpokValidatio[m
         respokHandler(command, query, userId, txt)[m
       }[m
       case Some(UNSPOK) => unspokHandler(command, query, userId, txt)[m
[31m-      case Some(ADD_COMMENT) => addCommentHandler(command, userId, txt)[m
[31m-      case Some(REMOVE_COMMENT) => removeCommentHandler(command, userId, txt)[m
[31m-      case Some(UPDATE_COMMENT) => updateCommentHandler(command, userId, txt)[m
[31m-      case Some(DISABLE) => eventuateDisableSpokHandler(command, userId, txt)[m
[32m+[m[32m      case Some(ADD_COMMENT) => addCommentHandler(command, query, userId, txt)[m
[32m+[m[32m      case Some(REMOVE_COMMENT) => removeCommentHandler(command, query, userId, txt)[m
[32m+[m[32m      case Some(UPDATE_COMMENT) => updateCommentHandler(command, query, userId, txt)[m
[32m+[m[32m      case Some(DISABLE) => eventuateDisableSpokHandler(command, query, userId, txt)[m
       case Some(REMOVE_SPOK) => eventuateRemoveSpokFromWallHandler(query, command, userId, txt)[m
       case Some(SUBSCRIBE) => eventuateSubscribeUnsubscribeHandler(query, userId, txt)[m
       case Some(ANSWER_POLL) => answerPollQuestionHandler(command, userId, txt)[m
[36m@@ -106,15 +107,37 @@[m [mtrait SpokRestServiceHandler extends JsonHelper with HttpUtil with SpokValidatio[m
    * @param command[m
    * @return spok creation success if spok is created else false[m
    */[m
[31m-  def storeSpokSettings(command: ActorRef, userId: String, json: String, file: Option[File]): Future[HttpResponse] = {[m
[31m-    val spok = createSpok(json, file)[m
[31m-    spok match {[m
[31m-      case (Some(userSpok), message) => {[m
[31m-        val futureResponse = ask(command, Create(userSpok, userId)).mapTo[SpokAck][m
[31m-        futureResponse.map(handleResponse(json, userSpok, _, userId))[m
[32m+[m[32m  def storeSpokSettings(query: ActorRef, command: ActorRef, userId: String, json: String, file: Option[File]): Future[HttpResponse] = {[m
[32m+[m[32m    println("=========storeSpokSettings==========")[m
[32m+[m[32m    val isSpokerSuspended: Future[IsUserSuspendedAsk] = ask(query, IsUserSuspended(userId)).mapTo[IsUserSuspendedAsk][m
[32m+[m[32m    val response = isSpokerSuspended.map { response =>[m
[32m+[m[32m      response.status match {[m
[32m+[m[32m        case SPOKER_SUSPENDED =>[m
[32m+[m[32m          println(">>>>>>>>>>> suspended>>>>>")[m
[32m+[m[32m          Future(HttpResponse(StatusCodes.BadRequest, entity = HttpEntity([m
[32m+[m[32m            ContentTypes.`application/json`,[m
[32m+[m[32m            write(sendFormattedError(SPK_014, ACTION_IMPOSSIBLE, Some(CREATE_SPOK)))[m
[32m+[m[32m          )))[m
[32m+[m
[32m+[m[32m        case SPOKER_NOT_SUSPENDED =>[m
[32m+[m[32m          println(">>>>>>>>>>> not suspended>>>>>")[m
[32m+[m[32m          val spok = createSpok(json, file)[m
[32m+[m[32m          spok match {[m
[32m+[m[32m            case (Some(userSpok), message) => {[m
[32m+[m[32m              val futureResponse = ask(command, Create(userSpok, userId)).mapTo[SpokAck][m
[32m+[m[32m              futureResponse.map(handleResponse(json, userSpok, _, userId))[m
[32m+[m[32m            }[m
[32m+[m[32m            case (None, message) => Future(message)[m
[32m+[m[32m          }[m
[32m+[m
[32m+[m[32m        case _ => Future(HttpResponse(StatusCodes.BadRequest, entity = HttpEntity([m
[32m+[m[32m          ContentTypes.`application/json`,[m
[32m+[m[32m          write(sendFormattedError(SPK_109, UNABLE_CREATING_SPOK_GENERIC_ERROR, Some(CREATE_SPOK)))[m
[32m+[m[32m        )))[m
[32m+[m
       }[m
[31m-      case (None, message) => Future(message)[m
     }[m
[32m+[m[32m    response.flatMap(identity)[m
   }[m
 [m
   private def handleResponse(txt: String, userSpok: Spok, response: SpokAck, userId: String): HttpResponse = {[m
[36m@@ -139,17 +162,29 @@[m [mtrait SpokRestServiceHandler extends JsonHelper with HttpUtil with SpokValidatio[m
    * @return respok success if all validations pass and respok is done otherwise the error message[m
    */[m
   private def respokHandler(command: ActorRef, query: ActorRef, userId: String, json: String): Future[TextMessage] = {[m
[31m-    val spokIdOpt = (parse(json) \ (SPOK_ID)).extractOpt[String][m
[31m-    spokIdOpt match {[m
[31m-      case Some(spokInstanceId) => {[m
[31m-        val respok = extractRespokDetailsWithValidation(json)[m
[31m-        respok match {[m
[31m-          case (Some(respok), _) => eventuateRespokHandler(command, query, spokInstanceId, respok, userId)[m
[31m-          case (None, message) => Future(message)[m
[31m-        }[m
[32m+[m
[32m+[m[32m    val isSpokerSuspended: Future[IsUserSuspendedAsk] = ask(query, IsUserSuspended(userId)).mapTo[IsUserSuspendedAsk][m
[32m+[m[32m    val response = isSpokerSuspended.map {response=>[m
[32m+[m[32m      response.status match {[m
[32m+[m[32m        case SPOKER_SUSPENDED => Future(TextMessage(write(sendFormattedError(SPK_014, ACTION_IMPOSSIBLE, Some(RESPOK)))))[m
[32m+[m[32m        case SPOKER_NOT_SUSPENDED =>[m
[32m+[m
[32m+[m[32m          val spokIdOpt = (parse(json) \ (SPOK_ID)).extractOpt[String][m
[32m+[m[32m          spokIdOpt match {[m
[32m+[m[32m            case Some(spokInstanceId) => {[m
[32m+[m[32m              val respok = extractRespokDetailsWithValidation(json)[m
[32m+[m[32m              respok match {[m
[32m+[m[32m                case (Some(respok), _) => eventuateRespokHandler(command, query, spokInstanceId, respok, userId)[m
[32m+[m[32m                case (None, message) => Future(message)[m
[32m+[m[32m              }[m
[32m+[m[32m            }[m
[32m+[m[32m            case None => Future(TextMessage(write(sendJsonErrorWithEmptyData(Some(RESPOK)))))[m
[32m+[m[32m          }[m
[32m+[m
[32m+[m[32m        case _ => Future(TextMessage(write(sendFormattedError(SPK_117, "Unable re-spoking spok (generic error).", Some(RESPOK)))))[m
       }[m
[31m-      case None => Future(TextMessage(write(sendJsonErrorWithEmptyData(Some(RESPOK)))))[m
     }[m
[32m+[m[32m    response.flatMap(identity)[m
   }[m
 [m
   private def eventuateRespokHandler(command: ActorRef, query: ActorRef, spokId: String, respok: Respok, userId: String): Future[TextMessage] = {[m
[36m@@ -340,18 +375,27 @@[m [mtrait SpokRestServiceHandler extends JsonHelper with HttpUtil with SpokValidatio[m
    * @param userId  user id of an user[m
    * @return json of comment added success if comment is addesd succeffully else the erroe meassage[m
    */[m
[31m-  def addCommentHandler(command: ActorRef, userId: String, json: String): Future[TextMessage] = {[m
[31m-    val spokIdOpt = (parse(json) \ (SPOK_ID)).extractOpt[String][m
[31m-    spokIdOpt match {[m
[31m-      case Some(spokInstanceId) => {[m
[31m-        val validComment = extractCommentWithValidation(json, getUUID())[m
[31m-        validComment match {[m
[31m-          case (Some(comment), _) => eventuateAddCommentHandler(command, spokInstanceId, userId, comment)[m
[31m-          case (None, message) => Future(TextMessage(write(generateCommonResponseForError(FAILED, message, None, Some(ADD_COMMENT)))))[m
[31m-        }[m
[32m+[m[32m  def addCommentHandler(command: ActorRef, query: ActorRef, userId: String, json: String): Future[TextMessage] = {[m
[32m+[m[32m    val isSpokerSuspended: Future[IsUserSuspendedAsk] = ask(query, IsUserSuspended(userId)).mapTo[IsUserSuspendedAsk][m
[32m+[m[32m    val response = isSpokerSuspended.map { response =>[m
[32m+[m[32m      response.status match {[m
[32m+[m[32m        case SPOKER_SUSPENDED => Future(TextMessage(write(sendFormattedError(SPK_014, ACTION_IMPOSSIBLE, Some(ADD_COMMENT)))))[m
[32m+[m[32m        case SPOKER_NOT_SUSPENDED =>[m
[32m+[m[32m          val spokIdOpt = (parse(json) \ (SPOK_ID)).extractOpt[String][m
[32m+[m[32m          spokIdOpt match {[m
[32m+[m[32m            case Some(spokInstanceId) => {[m
[32m+[m[32m              val validComment = extractCommentWithValidation(json, getUUID())[m
[32m+[m[32m              validComment match {[m
[32m+[m[32m                case (Some(comment), _) => eventuateAddCommentHandler(command, spokInstanceId, userId, comment)[m
[32m+[m[32m                case (None, message) => Future(TextMessage(write(generateCommonResponseForError(FAILED, message, None, Some(ADD_COMMENT)))))[m
[32m+[m[32m              }[m
[32m+[m[32m            }[m
[32m+[m[32m            case None => Future(TextMessage(write(sendJsonErrorWithEmptyData(Some(ADD_COMMENT)))))[m
[32m+[m[32m          }[m
[32m+[m[32m        case _ => Future(TextMessage(write(sendFormattedError(SPK_119, UNABLE_COMMENTING_SPOK, Some(ADD_COMMENT)))))[m
       }[m
[31m-      case None => Future(TextMessage(write(sendJsonErrorWithEmptyData(Some(ADD_COMMENT)))))[m
     }[m
[32m+[m[32m    response.flatMap(identity)[m
   }[m
 [m
   private def eventuateAddCommentHandler(command: ActorRef, spokInstanceId: String, userId: String, comment: Comment): Future[TextMessage] = {[m
[36m@@ -395,18 +439,32 @@[m [mtrait SpokRestServiceHandler extends JsonHelper with HttpUtil with SpokValidatio[m
    * @param userId Id of the user updating the comment (only the user who created the comment can update the comment)[m
    * @return[m
    */[m
[31m-  def updateCommentHandler(command: ActorRef, userId: String, json: String): Future[TextMessage] = {[m
[31m-    val commentIdOpt = (parse(json) \ (COMMENT_ID)).extractOpt[String][m
[31m-    commentIdOpt match {[m
[31m-      case Some(commentId) => {[m
[31m-        val validComment = extractCommentWithValidation(json, commentId)[m
[31m-        validComment match {[m
[31m-          case (Some(comment), _) => eventuateUpdateCommentHandler(command, userId, comment)[m
[31m-          case (None, message) => Future(TextMessage(write(generateCommonResponseForError(FAILED, message, None, resource = Some(UPDATE_COMMENT)))))[m
[31m-        }[m
[32m+[m[32m  def updateCommentHandler(command: ActorRef, query: ActorRef, userId: String, json: String): Future[TextMessage] = {[m
[32m+[m
[32m+[m
[32m+[m[32m    val isSpokerSuspended: Future[IsUserSuspendedAsk] = ask(query, IsUserSuspended(userId)).mapTo[IsUserSuspendedAsk][m
[32m+[m
[32m+[m[32m    val response = isSpokerSuspended.map {response=>[m
[32m+[m[32m      response.status match {[m
[32m+[m[32m        case SPOKER_SUSPENDED =>Future(TextMessage(write(sendFormattedError(SPK_014, ACTION_IMPOSSIBLE, Some(UPDATE_COMMENT)))))[m
[32m+[m[32m        case SPOKER_NOT_SUSPENDED =>[m
[32m+[m
[32m+[m[32m          val commentIdOpt = (parse(json) \ (COMMENT_ID)).extractOpt[String][m
[32m+[m[32m          commentIdOpt match {[m
[32m+[m[32m            case Some(commentId) => {[m
[32m+[m[32m              val validComment = extractCommentWithValidation(json, commentId)[m
[32m+[m[32m              validComment match {[m
[32m+[m[32m                case (Some(comment), _) => eventuateUpdateCommentHandler(command, userId, comment)[m
[32m+[m[32m                case (None, message) => Future(TextMessage(write(generateCommonResponseForError(FAILED, message, None, resource = Some(UPDATE_COMMENT)))))[m
[32m+[m[32m              }[m
[32m+[m[32m            }[m
[32m+[m[32m            case None => Future(TextMessage(write(sendJsonErrorWithEmptyData(Some(UPDATE_COMMENT)))))[m
[32m+[m[32m          }[m
[32m+[m
[32m+[m[32m        case _ =>Future(TextMessage(write(sendFormattedError(SPK_120, "Unable updating comment (generic error)", Some(UPDATE_COMMENT)))))[m
       }[m
[31m-      case None => Future(TextMessage(write(sendJsonErrorWithEmptyData(Some(UPDATE_COMMENT)))))[m
     }[m
[32m+[m[32m    response.flatMap(identity)[m
   }[m
 [m
   private def eventuateUpdateCommentHandler(command: ActorRef, userId: String, comment: Comment): Future[TextMessage] = {[m
[36m@@ -422,23 +480,36 @@[m [mtrait SpokRestServiceHandler extends JsonHelper with HttpUtil with SpokValidatio[m
     }[m
   }[m
 [m
[31m-  def removeCommentHandler(command: ActorRef, userId: String, json: String): Future[TextMessage] = {[m
[31m-    val (removeComment, message) = extractRemoveCommentDetailsWithValidation(json)[m
[31m-    removeComment match {[m
[31m-      case Some(validCommentRemove) => {[m
[31m-        val commentRemove = ask(command, RemoveComment(validCommentRemove.commentId, userId, validCommentRemove.geo)).mapTo[SpokAck][m
[31m-        commentRemove map {[m
[31m-          case RemoveCommentSuccess(commentRemoved) => TextMessage(write(generateCommonResponseForCaseClass([m
[31m-            SUCCESS,[m
[31m-            Some(List()), Some(Response(removeCommentResponse = commentRemoved)), resource = Some(REMOVE_COMMENT)[m
[31m-          )))[m
[31m-          case removeCommentFailure: RemoveCommentFailure => TextMessage(write(sendFormattedError([m
[31m-            removeCommentFailure.errorCode, removeCommentFailure.cause.getMessage, resource = Some(REMOVE_COMMENT)[m
[31m-          )))[m
[31m-        }[m
[32m+[m[32m  def removeCommentHandler(command: ActorRef, query: ActorRef, userId: String, json: String): Future[TextMessage] = {[m
[32m+[m[32m    val isSpokerSuspended: Future[IsUserSuspendedAsk] = ask(query, IsUserSuspended(userId)).mapTo[IsUserSuspendedAsk][m
[32m+[m
[32m+[m[32m    val response = isSpokerSuspended.map { response =>[m
[32m+[m[32m      response.status match {[m
[32m+[m[32m        case SPOKER_SUSPENDED => Future(TextMessage(write(sendFormattedError(SPK_014, ACTION_IMPOSSIBLE, Some(REMOVE_COMMENT)))))[m
[32m+[m[32m        case SPOKER_NOT_SUSPENDED =>[m
[32m+[m
[32m+[m[32m          val (removeComment, message) = extractRemoveCommentDetailsWithValidation(json)[m
[32m+[m[32m          removeComment match {[m
[32m+[m[32m            case Some(validCommentRemove) => {[m
[32m+[m[32m              val commentRemove = ask(command, RemoveComment(validCommentRemove.commentId, userId, validCommentRemove.geo)).mapTo[SpokAck][m
[32m+[m[32m              commentRemove map {[m
[32m+[m[32m                case RemoveCommentSuccess(commentRemoved) => TextMessage(write(generateCommonResponseForCaseClass([m
[32m+[m[32m                  SUCCESS,[m
[32m+[m[32m                  Some(List()), Some(Response(removeCommentResponse = commentRemoved)), resource = Some(REMOVE_COMMENT)[m
[32m+[m[32m                )))[m
[32m+[m[32m                case removeCommentFailure: RemoveCommentFailure => TextMessage(write(sendFormattedError([m
[32m+[m[32m                  removeCommentFailure.errorCode, removeCommentFailure.cause.getMessage, resource = Some(REMOVE_COMMENT)[m
[32m+[m[32m                )))[m
[32m+[m[32m              }[m
[32m+[m[32m            }[m
[32m+[m[32m            case None => Future(TextMessage(message))[m
[32m+[m[32m          }[m
[32m+[m
[32m+[m[32m        case _ => Future(TextMessage(write(sendFormattedError(SPK_121, UNABLE_REMOVING_COMMENT, Some(REMOVE_COMMENT)))))[m
       }[m
[31m-      case None => Future(TextMessage(message))[m
     }[m
[32m+[m
[32m+[m[32m    response.flatMap(identity)[m
   }[m
 [m
   private def extractRemoveCommentDetailsWithValidation(removeCommentJson: String): (Option[InterimRemoveComment], String) = {[m
[36m@@ -526,21 +597,34 @@[m [mtrait SpokRestServiceHandler extends JsonHelper with HttpUtil with SpokValidatio[m
    * @return subscribe/unsubscribe success if all validations pass and subscribe/unsubscribe is done otherwise the error message[m
    */[m
   def eventuateSubscribeUnsubscribeHandler(query: ActorRef, userId: String, json: String): Future[TextMessage] = {[m
[31m-    val (subscribeDetails, message) = extractSubscribeDetailsWithValidation(json)[m
[31m-    val launchedTime = System.currentTimeMillis()[m
[31m-    subscribeDetails match {[m
[31m-      case Some(subscribe) => {[m
[31m-        val futureResponse = ask(query, IsValidSpokWithEnabledFlag(subscribe.spokId)).mapTo[IsValidSpokWithEnabledAck][m
[31m-        futureResponse flatMap {[m
[31m-          response =>[m
[31m-            response.status match {[m
[31m-              case true => handleValidSubscribeUnsubscribeRequest(subscribe, userId, launchedTime)[m
[31m-              case false => Future(TextMessage(write(sendFormattedError(SPK_001, spokNotFound(subscribe.spokId), Some(SUBSCRIBE)))))[m
[32m+[m
[32m+[m[32m    val isSpokerSuspended: Future[IsUserSuspendedAsk] = ask(query, IsUserSuspended(userId)).mapTo[IsUserSuspendedAsk][m
[32m+[m
[32m+[m[32m    val response = isSpokerSuspended.map {response=>[m
[32m+[m[32m      response.status match {[m
[32m+[m[32m        case SPOKER_SUSPENDED => Future(TextMessage(write(sendFormattedError(SPK_014, ACTION_IMPOSSIBLE, Some(SUBSCRIBE)))))[m
[32m+[m[32m        case SPOKER_NOT_SUSPENDED =>[m
[32m+[m
[32m+[m[32m          val (subscribeDetails, message) = extractSubscribeDetailsWithValidation(json)[m
[32m+[m[32m          val launchedTime = System.currentTimeMillis()[m
[32m+[m[32m          subscribeDetails match {[m
[32m+[m[32m            case Some(subscribe) => {[m
[32m+[m[32m              val futureResponse = ask(query, IsValidSpokWithEnabledFlag(subscribe.spokId)).mapTo[IsValidSpokWithEnabledAck][m
[32m+[m[32m              futureResponse flatMap {[m
[32m+[m[32m                response =>[m
[32m+[m[32m                  response.status match {[m
[32m+[m[32m                    case true => handleValidSubscribeUnsubscribeRequest(subscribe, userId, launchedTime)[m
[32m+[m[32m                    case false => Future(TextMessage(write(sendFormattedError(SPK_001, spokNotFound(subscribe.spokId), Some(SUBSCRIBE)))))[m
[32m+[m[32m                  }[m
[32m+[m[32m              }[m
             }[m
[31m-        }[m
[32m+[m[32m            case None => Future(TextMessage(message))[m
[32m+[m[32m          }[m
[32m+[m
[32m+[m[32m        case _ => Future(TextMessage(write(sendFormattedError(SPK_123, "Unable susbcribing to /unsubscribing from spok feed (generic error).", Some(SUBSCRIBE)))))[m
       }[m
[31m-      case None => Future(TextMessage(message))[m
     }[m
[32m+[m[32m    response.flatMap(identity)[m
   }[m
 [m
   private def handleValidSubscribeUnsubscribeRequest(subscribe: InterimSubscribeUnsubscribe, userId: String, launchedTime: Long) = {[m
[36m@@ -579,22 +663,35 @@[m [mtrait SpokRestServiceHandler extends JsonHelper with HttpUtil with SpokValidatio[m
    * @param userId[m
    * @return[m
    */[m
[31m-  def eventuateDisableSpokHandler(command: ActorRef, userId: String, json: String): Future[TextMessage] = {[m
[31m-    val (disableSpokOpt, message) = extractDisableSpokDetailsWithValidation(json)[m
[31m-    disableSpokOpt match {[m
[31m-      case Some(disableSpok) => {[m
[31m-        val launchedTime = System.currentTimeMillis()[m
[31m-        val futureResponse = ask(command, Disable(disableSpok.spokId, userId, launchedTime, disableSpok.geo)).mapTo[SpokAck][m
[31m-        futureResponse map {[m
[31m-          case DisableSpokSuccess(spokDisableResponse) =>[m
[31m-            TextMessage(write(generateCommonResponseForCaseClass(SUCCESS, Some(List()), Some(DisableSpokSuccess(spokDisableResponse)), Some(DISABLE))))[m
[31m-          case disableSpokFailure: DisableSpokFailure => TextMessage(write([m
[31m-            sendFormattedError(disableSpokFailure.errorCode, disableSpokFailure.cause.getMessage, Some(DISABLE))[m
[31m-          ))[m
[31m-        }[m
[32m+[m[32m  def eventuateDisableSpokHandler(command: ActorRef, query: ActorRef, userId: String, json: String): Future[TextMessage] = {[m
[32m+[m
[32m+[m[32m    val isSpokerSuspended: Future[IsUserSuspendedAsk] = ask(query, IsUserSuspended(userId)).mapTo[IsUserSuspendedAsk][m
[32m+[m
[32m+[m[32m    val response = isSpokerSuspended.map {response=>[m
[32m+[m[32m      response.status match {[m
[32m+[m[32m        case SPOKER_SUSPENDED =>Future(TextMessage(write(sendFormattedError(SPK_014, ACTION_IMPOSSIBLE, Some(DISABLE)))))[m
[32m+[m[32m        case SPOKER_NOT_SUSPENDED =>[m
[32m+[m
[32m+[m[32m          val (disableSpokOpt, message) = extractDisableSpokDetailsWithValidation(json)[m
[32m+[m[32m          disableSpokOpt match {[m
[32m+[m[32m            case Some(disableSpok) => {[m
[32m+[m[32m              val launchedTime = System.currentTimeMillis()[m
[32m+[m[32m              val futureResponse = ask(command, Disable(disableSpok.spokId, userId, launchedTime, disableSpok.geo)).mapTo[SpokAck][m
[32m+[m[32m              futureResponse map {[m
[32m+[m[32m                case DisableSpokSuccess(spokDisableResponse) =>[m
[32m+[m[32m                  TextMessage(write(generateCommonResponseForCaseClass(SUCCESS, Some(List()), Some(DisableSpokSuccess(spokDisableResponse)), Some(DISABLE))))[m
[32m+[m[32m                case disableSpokFailure: DisableSpokFailure => TextMessage(write([m
[32m+[m[32m                  sendFormattedError(disableSpokFailure.errorCode, disableSpokFailure.cause.getMessage, Some(DISABLE))[m
[32m+[m[32m                ))[m
[32m+[m[32m              }[m
[32m+[m[32m            }[m
[32m+[m[32m            case None => Future(TextMessage(message))[m
[32m+[m[32m          }[m
[32m+[m
[32m+[m[32m        case _ =>Future(TextMessage(write(sendFormattedError(SPK_115, UNABLE_DISABLING_SPOK, Some(DISABLE)))))[m
       }[m
[31m-      case None => Future(TextMessage(message))[m
     }[m
[32m+[m[32m    response.flatMap(identity)[m
   }[m
 [m
   private def extractDisableSpokDetailsWithValidation(disableSpokJson: String): (Option[InterimDisableSpok], String) = {[m
[36m@@ -611,14 +708,27 @@[m [mtrait SpokRestServiceHandler extends JsonHelper with HttpUtil with SpokValidatio[m
   }[m
 [m
   def eventuateRemoveSpokFromWallHandler(query: ActorRef, command: ActorRef, userId: String, json: String): Future[TextMessage] = {[m
[31m-    val (removeSpokOpt, message) = extractRemoveSpokDetailsWithValidation(json)[m
[31m-    removeSpokOpt match {[m
[31m-      case Some(removeSpok) => {[m
[31m-        val futureResponse = ask(query, IsValidAbsoluteSpok(removeSpok.spokId)).mapTo[IsValidAbsoluteSpokAck][m
[31m-        futureResponse flatMap (response => checkIfSpokValidOrNot(response, command, removeSpok.spokId, userId, removeSpok.geo))[m
[32m+[m
[32m+[m[32m    val isSpokerSuspended: Future[IsUserSuspendedAsk] = ask(query, IsUserSuspended(userId)).mapTo[IsUserSuspendedAsk][m
[32m+[m
[32m+[m[32m    val response = isSpokerSuspended.map {response=>[m
[32m+[m[32m      response.status match {[m
[32m+[m[32m        case SPOKER_SUSPENDED => Future(TextMessage(write(sendFormattedError(SPK_014, ACTION_IMPOSSIBLE, Some(REMOVE_SPOK)))))[m
[32m+[m[32m        case SPOKER_NOT_SUSPENDED =>[m
[32m+[m
[32m+[m[32m          val (removeSpokOpt, message) = extractRemoveSpokDetailsWithValidation(json)[m
[32m+[m[32m          removeSpokOpt match {[m
[32m+[m[32m            case Some(removeSpok) => {[m
[32m+[m[32m              val futureResponse = ask(query, IsValidAbsoluteSpok(removeSpok.spokId)).mapTo[IsValidAbsoluteSpokAck][m
[32m+[m[32m              futureResponse flatMap (response => checkIfSpokValidOrNot(response, command, removeSpok.spokId, userId, removeSpok.geo))[m
[32m+[m[32m            }[m
[32m+[m[32m            case None => Future(TextMessage(message))[m
[32m+[m[32m          }[m
[32m+[m
[32m+[m[32m        case _ => Future(TextMessage(write(sendFormattedError(SPK_116, UNABLE_REMOVING_SPOK, Some(REMOVE_SPOK)))))[m
       }[m
[31m-      case None => Future(TextMessage(message))[m
     }[m
[32m+[m[32m    response.flatMap(identity)[m
   }[m
 [m
   private def extractRemoveSpokDetailsWithValidation(removeSpokJson: String): (Option[InterimRemoveSpok], String) = {[m
[1mdiff --git a/spok/src/main/scala/com/spok/services/routes/SpokRestService.scala b/spok/src/main/scala/com/spok/services/routes/SpokRestService.scala[m
[1mindex 6893c5b..4ff726f 100644[m
[1m--- a/spok/src/main/scala/com/spok/services/routes/SpokRestService.scala[m
[1m+++ b/spok/src/main/scala/com/spok/services/routes/SpokRestService.scala[m
[36m@@ -213,12 +213,13 @@[m [mtrait SpokRestService extends SpokRestServiceHandler {[m
    * @param command[m
    * @return[m
    */[m
[31m-  def createSpok(command: ActorRef): Route = {[m
[32m+[m[32m  def createSpok(command: ActorRef, query: ActorRef): Route = {[m
     path("create" / "spok") {[m
       (post & entity(as[Multipart.FormData])) { formData =>[m
         {[m
           parameters('userId, 'phone_number) { (userId, phoneNumber) =>[m
             {[m
[32m+[m[32m              println("==========create spok =========")[m
               val extractedData: Future[Map[String, Any]] = formData.parts.mapAsync[(String, Any)](1) {[m
                 case file: BodyPart if file.name == "file" =>[m
                   val extension = file.entity.getContentType().toString.split("/")[m
[36m@@ -232,7 +233,7 @@[m [mtrait SpokRestService extends SpokRestServiceHandler {[m
               }.runFold(Map.empty[String, Any])((map, tuple) => map + tuple)[m
               complete([m
                 extractedData.flatMap { data =>[m
[31m-                  storeSpokSettings(command, userId, data.get("data").getOrElse("").toString, data.get("file").map(_.asInstanceOf[File]))[m
[32m+[m[32m                  storeSpokSettings(query, command, userId, data.get("data").getOrElse("").toString, data.get("file").map(_.asInstanceOf[File]))[m
                 }.recover {[m
                   case ex: ParseException =>[m
                     HttpResponse(StatusCodes.BadRequest, entity = HttpEntity([m
[36m@@ -302,7 +303,7 @@[m [mtrait SpokRestService extends SpokRestServiceHandler {[m
 [m
   def routes(command: ActorRef, query: ActorRef): Route = sampleRoute ~ spokRoute(command, query) ~ viewPollQuestion(query) ~[m
     getSpokStats(query) ~ getComments(query) ~ getReSpokers(query) ~ getScopedUsers(query) ~ getSpoksStack(query) ~ viewShortSpok(query) ~[m
[31m-    viewSpokersWall(query) ~ viewFullSpok(query) ~ createSpok(command) ~ viewPollStats(query) ~ getMySpok(query)[m
[32m+[m[32m    viewSpokersWall(query) ~ viewFullSpok(query) ~ createSpok(command, query) ~ viewPollStats(query) ~ getMySpok(query)[m
 [m
 }[m
 [m
[1mdiff --git a/spok/src/main/scala/com/spok/services/service/SpokActorReplies.scala b/spok/src/main/scala/com/spok/services/service/SpokActorReplies.scala[m
[1mindex ca75397..7e59143 100644[m
[1m--- a/spok/src/main/scala/com/spok/services/service/SpokActorReplies.scala[m
[1m+++ b/spok/src/main/scala/com/spok/services/service/SpokActorReplies.scala[m
[36m@@ -65,6 +65,8 @@[m [mobject SpokViewValidationReplies {[m
 [m
   case class IsValidSpokAck(status: String, isEnabled: Boolean, edge: Option[Edge] = None)[m
 [m
[32m+[m[32m  case class IsUserSuspendedAsk(status: String)[m
[32m+[m
   case class IsValidPollQuestionAck(spokId: Option[String])[m
 [m
   case class IsValidAbsoluteSpokAck(status: String)[m
[1mdiff --git a/spok/src/main/scala/com/spok/services/service/SpokView.scala b/spok/src/main/scala/com/spok/services/service/SpokView.scala[m
[1mindex 440b9b5..19a25e9 100644[m
[1m--- a/spok/src/main/scala/com/spok/services/service/SpokView.scala[m
[1m+++ b/spok/src/main/scala/com/spok/services/service/SpokView.scala[m
[36m@@ -80,6 +80,11 @@[m [mclass SpokView(replicaId: String, override val eventLog: ActorRef)[m
     case GetMySpoks(userId, pos) =>[m
       sender() ! SpoksStack(dseSpokViewApi.getMySpoks(userId, pos))[m
 [m
[32m+[m[32m    case IsUserSuspended(spokId) => {[m
[32m+[m[32m      val status = dseUserSpokFactoryApi.spokerSuspendedOrNot(spokId)[m
[32m+[m[32m      sender() ! IsUserSuspendedAsk(status)[m
[32m+[m[32m    }[m
[32m+[m
   }[m
 [m
   /**[m
[1mdiff --git a/spok/src/main/scala/com/spok/services/service/SpokViewValidationCommands.scala b/spok/src/main/scala/com/spok/services/service/SpokViewValidationCommands.scala[m
[1mindex 70bf617..cc118a8 100644[m
[1m--- a/spok/src/main/scala/com/spok/services/service/SpokViewValidationCommands.scala[m
[1m+++ b/spok/src/main/scala/com/spok/services/service/SpokViewValidationCommands.scala[m
[36m@@ -18,4 +18,6 @@[m [mobject SpokViewValidationCommands {[m
   case class IsUnspoked(spokId: String)[m
 [m
   case class IsValidSpokById(spokId: String)[m
[32m+[m
[32m+[m[32m  case class IsUserSuspended(spokerId: String)[m
 }[m
